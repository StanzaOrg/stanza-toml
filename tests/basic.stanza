#use-added-syntax(tests)
defpackage toml/tests/basic:
  import core
  import collections
  import toml/table
  import toml/parser
  import toml/value
  import toml/file

public defn dedent (str: String) -> String:
  defn trim-left (s: String):
    let loop (i = 0):
      if i < length(s) and s[i] == ' ':
        loop(i + 1)
      else:
        s[i to false]
  str
    $> split{_, "\n"}
    $> seq{trim-left, _}
    $> string-join{_, "\n"}

deftest parse-str:
  val table = table(parse-string("title = \"TOML Example\"\n"))
  #EXPECT(length(entries(table)) == 1)
  #EXPECT(table["title"] as String == "TOML Example")

deftest parse-num:
  val table = table(parse-string("title = 10\n"))
  #EXPECT(length(entries(table)) == 1)
  #EXPECT(table["title"] as Int == 10)

deftest parse-quoted-key:
  val table = table $ parse-string $ dedent $ \<>
    "hello world" = 10
    site."google.com" = "https://google.com"
  <>
  #EXPECT(table["hello world"] as Int == 10)
  #EXPECT((table["site"] as TomlTable)["google.com"] as String == "https://google.com")

deftest table-parse:
  val toml = table $ parse-string $ dedent $ \<>
    foo = "bar"
    bar = 1
    [dependencies]
    stanza-toml = "git@github.com:tylanphear/stanza-toml"
    poet = "git@github.com:tylanphear/poet"
  <>
  #EXPECT(toml["foo"] as String == "bar")
  #EXPECT(toml["bar"] as Int == 1)
  #EXPECT(toml["dependencies.stanza-toml"] as String == "git@github.com:tylanphear/stanza-toml")
  #EXPECT(toml["dependencies.poet"] as String == "git@github.com:tylanphear/poet")

deftest multiple-tables:
  val toml = table $ parse-string $ \<>
  [a]
  foo = "bar"
  [b]
  foo = "bar"
  <>
  #EXPECT(toml["a"] is TomlTable)
  #EXPECT(toml["a.foo"] as String == "bar")
  #EXPECT(toml["b"] is TomlTable)
  #EXPECT(toml["b.foo"] as String == "bar")

deftest dotted-key-value:
  val toml = table $ parse-string $ dedent $ \<>
    foo.bar.baz = 10
    foo.bar.bang = "20"
  <>
  #EXPECT(toml["foo"] is TomlTable)
  #EXPECT(toml["foo.bar.baz"] as Int == 10)
  #EXPECT(toml["foo.bar.bang"] as String == "20")

deftest dotted-key-value-in-table:
  val toml = table $ parse-string $ dedent $ \<>
    [foo.bar]
    baz.bang = "Hello, world!"
  <>
  #EXPECT(toml["foo.bar.baz.bang"] as String == "Hello, world!")

deftest inline-table:
  val toml = table $ parse-string $ "foo = { bar = { baz = 10, bang = \"hello\" } }\n"
  #EXPECT(toml["foo.bar.baz"] as Int == 10)
  #EXPECT(toml["foo.bar.bang"] as String == "hello")

deftest crlf-line-ending:
  val toml = table $ parse-string $ "foo = \"bar\"\r\nbaz = 10\r\n"
  #EXPECT(toml["foo"] as String == "bar")
  #EXPECT(toml["baz"] as Int == 10)

deftest empty-inline-table:
  val toml = table $ parse-string $ "foo = {}\n"
  #EXPECT(length(entries(toml["foo"] as TomlTable)) == 0)

deftest comments:
  val toml = table $ parse-string $ "# this is a comment\nfoo = \"bar\"\n"
  #EXPECT((toml["foo"] as String) == "bar")
