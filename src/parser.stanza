defpackage toml/parser:
  import core
  import collections
  import maybe-utils
  import toml/value
  import toml/file
  import toml/table
  import toml/utils

public defstruct TomlParserError <: Exception :
  file-name:String
  line:Int
  column:Int
  msg:String|Printable

defmethod print (o:OutputStream, e:TomlParserError):
  print(o, "[%_:%~:%~]: error: %~" % [file-name(e), line(e), column(e), to-string(msg(e))])

defstruct ParsePosition:
  offset: Int
  line: Int
  column: Int

defn ParsePosition ():
  ParsePosition(0, 1, 1)

defstruct Parser:
  content: String
  file-name: String
  position: ParsePosition with: (setter => set-position)
  table: TomlTable

defn peek (parser: Parser) -> Maybe<Char>:
  val offset = offset(position(parser))
  val content = content(parser)
  if offset >= length(content):
    None()
  else:
    One(content[offset])

defn error (parser: Parser, msg: Printable) -> Void:
  val pos = position(parser)
  throw $ TomlParserError(file-name(parser), line(pos), column(pos), msg)

defn error (parser: Parser, msg: String) -> Void:
  error(parser, "%_" % [msg])

defn at-end (parser: Parser) -> True|False:
  offset(position(parser)) >= length(content(parser))

defn advance (parser: Parser) -> False:
  val offset = offset(position(parser))
  var line = line(position(parser))
  var column = column(position(parser))
  if peek(parser) == One('\n'):
    line = line + 1
    column = 1
  set-position(parser, ParsePosition(offset + 1, line, column))

defn skip-whitespace (parser: Parser) -> False:
  take-while(parser, is-whitespace)
  false

defn eat-comment (parser: Parser) -> False:
  take-while(parser, fn (c): c != '\n' and c != '\r')
  expect-newline(parser)
  false

defn expect (parser: Parser, value: Char) -> False|Void:
  if peek(parser) == One(value):
    advance(parser)
  else:
    error(parser, "Expected: `%~`\nGot: `%~`" % [value, peek(parser)])

defn expect-newline (parser: Parser) -> False|Void:
  if peek(parser) == One('\r'):
    advance(parser)
  expect(parser, '\n')

defn expect-newline-or-eof (parser:Parser) -> False|Void:
  if peek(parser) == One('\r'):
    advance(parser)
  match(peek(parser)):
    (c:One<Char>):
      if value(c) == '\n':
        advance(parser)
      else:
        error(parser, "Expected: `%~`\nGot: `%~`" % [value, peek(parser)])
    (x:None):
      false

defn take-while (parser: Parser, pred: Char -> True|False) -> String:
  val s = StringBuffer()
  let loop ():
    match(peek(parser)):
      (c?: One):
        if pred(value!(c?)):
          advance(parser)
          add(s, value!(c?))
          loop()
      (_: None): false
  to-string(s)

defn parse-string (parser: Parser) -> String:
  expect(parser, '"')

  val value = take-while(parser, {_ != '"'})
  expect(parser, '"')

  value

defn parse-integer (parser: Parser) -> Int:
  to-int!(take-while(parser, is-digit))

defn parse-table (parser: Parser) -> KeyValue<String, TomlTable>:
  debug("trace: parse-table")
  expect(parser, '[')
  val key = parse-key(parser)
  expect(parser, ']')
  expect-newline(parser)

  val table = TomlTable()
  parse-table-inner(parser, table, false)

  key => table

defn parse-identifier (parser: Parser) -> String:
  debug("trace: parse-identifier")
  val key = take-while(parser, is-identifier)
  if length(key) == 0:
    error(parser, "Expected identifier, got: `%~`" % [peek(parser)])
  key

defn parse-key (parser: Parser) -> String:
  debug("trace: parse-key")
  defn parse-key-component (parser: Parser) -> String:
    switch(peek(parser)):
      One('"'): parse-string(parser)
      else: parse-identifier(parser)

  val ident = StringBuffer()
  print(ident, parse-key-component(parser))

  while peek(parser) == One('.'):
    advance(parser)
    print(ident, '.')
    print(ident, parse-key-component(parser))
  to-string(ident)

defn parse-inline-table (parser: Parser) -> TomlTable:
  debug("trace: parse-inline-table")
  expect(parser, '{')
  skip-whitespace(parser)
  if peek(parser) == One('}'):
    advance(parser)
    TomlTable()
  else:
    val table = TomlTable()
    insert(table, parse-key-value(parser))
    let loop ():
      skip-whitespace(parser)
      if peek(parser) == One('}'):
        advance(parser)
        table
      else if peek(parser) == One(','):
        advance(parser)
        insert(table, parse-key-value(parser))
        loop()
      else if peek(parser) is One:
        error(parser, "Unexpected %~" % [value!(peek(parser))])
      else:
        error(parser, "Unexpected EOF!")

defn parse-key-value (parser: Parser) -> KeyValue<String, TomlValue>:
  debug("trace: parse-key-value")
  skip-whitespace(parser)

  val key = parse-key(parser)

  skip-whitespace(parser)
  expect(parser, '=')
  skip-whitespace(parser)

  val c = peek(parser)
  val value =
    if c == One('"'):
      parse-string(parser)
    else if c == One('{'):
      parse-inline-table(parser)
    else if c is-not None and is-digit(value!(c)):
      parse-integer(parser)
    else:
      error(parser, "Unexpected %~" % [c])

  key => value

defn parse-table-inner (parser: Parser, table: TomlTable, root?: True|False) -> False:
  debug("trace: parse-table-inner")
  label<False> break:
    while not at-end(parser):
      match(peek(parser)):
        (v: One<Char>):
          val c = value!(v)
          if c == '[':
            if not root?:
              break(false)
            else:
              insert(table, parse-table(parser))
          else if c == '#':
            eat-comment(parser)
          else if is-whitespace(c):
            skip-whitespace(parser)
          else if is-identifier(c) or c == '"':
            insert(table, parse-key-value(parser))
            expect-newline-or-eof(parser)
          else:
            error(parser, "Unexpected character: '%_'" % [c])
        (_):
          error(parser, "Unexpected EOF")

public defn parse-string (content: String) -> TomlFile:
  parse-file("<input>", content)

public defn parse-file (file-name: String) -> TomlFile:
  parse-file(file-name, slurp(file-name))

defn parse-file (file-name: String, content: String) -> TomlFile:
  debug("trace: parse-file")
  val parser = Parser(content, file-name, ParsePosition(), TomlTable())
  parse-table-inner(parser, table(parser), true)
  TomlFile(table(parser))
