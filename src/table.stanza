defpackage toml/table:
  import core
  import collections
  import toml/value
  import toml/pair
  import maybe-utils

public defstruct KeyAlreadyExistsError <: Exception :
  key:String

defmethod print (o:OutputStream, e:KeyAlreadyExistsError) :
  print(o, "key '%_' already exists in table" % [key(e)])

public defstruct KeyIsNotATableError <: Exception :
  key:String

defmethod print (o:OutputStream, e:KeyIsNotATableError) :
  print(o, "key '%_' is not a table" % [key(e)])

public deftype TomlTable <: TomlValue & Seqable<KeyValue<String, TomlValue>>
public defmulti set (t: TomlTable, key: String, value: TomlValue) -> False
public defmulti get (t: TomlTable, key: String) -> TomlValue
public defmulti get? (t: TomlTable, key: String) -> Maybe<TomlValue>
public defmulti entries (t: TomlTable) -> Vector<KeyValue<String, TomlValue>>
public defmulti insert (t: TomlTable, entry: KeyValue<String, TomlValue>) -> False

public defn TomlTable ():
  val key-indexes = HashTable<String, Int>()
  val entries = Vector<KeyValue<String, TomlValue>>()

  defn set-entry (key: String, value: TomlValue) -> False:
    val index = length(entries)
    add(entries, key => value)
    key-indexes[key] = index

  defn get-entry (key: String) -> Maybe<TomlValue>:
    val index = get?(key-indexes, key)
    match(index: Int):
      One(value(entries[index]))
    else:
      None()

  new TomlTable:
    defmethod insert (this, entry: KeyValue<String, TomlValue>) -> False:
      if contains?(keys(key-indexes), key(entry)):
        throw $ KeyAlreadyExistsError(key(entry))

      val components = to-tuple(split(key(entry), ".", 2))
      if length(components) == 2:
        val first-component = components[0]
        match(get-entry(first-component)):
          (first-table?: One<TomlValue>):
            match(value!(first-table?)):
              (first-table: TomlTable): insert(first-table, components[1] => value(entry))
              (_): throw $ KeyIsNotATableError(first-component)
          (_: None):
            val first-table = TomlTable()
            insert(first-table, components[1] => value(entry))
            set-entry(first-component, first-table)
      else:
        set-entry(key(entry), value(entry))

    defmethod set (this, key: String, value: TomlValue) -> False:
      insert(this, key => value)

    defmethod get (this, key: String) -> TomlValue:
      value!(get?(this, key))

    defmethod get? (this, key: String) -> Maybe<TomlValue>:
      val components = to-tuple(split(key, ".", 2))
      if length(components) == 2:
        get-entry(components[0])
          $> map{_, fn (first-table: TomlValue):
            match(first-table: TomlTable):
              first-table[components[1]]
            else:
              throw $ KeyIsNotATableError(key)
          }
      else:
        get-entry(key)

    defmethod entries (this) -> Vector<KeyValue<String, TomlValue>>:
      entries

    defmethod to-seq (this) -> Seq<KeyValue<String, TomlValue>>:
      to-seq(entries)

public defn TomlTable (pairs: Seqable<KeyValue<String, TomlValue>>):
  val table = TomlTable()
  for pair in pairs do:
    insert(table, pair)
  table

; Utility Functions for accesing data from the table.
;  These are helpers
#for (
  func-name in [get-str?, get-int?, get-table?],
  out-type in [String, Int, TomlTable]
  ):
  public defn func-name (t:TomlTable, key:String) -> Maybe<out-type> : 
    get?(t, key) $> map{_, {_ as out-type}}

